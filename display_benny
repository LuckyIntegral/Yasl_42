#!yasl_linux

{
	= "A" == ? ( 0:4 )
	= "B" == ? ( 1:4 )
	= "C" == ? ( 2:4 )
	= "D" == ? ( 3:4 )
	= "E" == ? ( 4:4 )
	= "F" == ? ( 5:4 )
	= "G" == ? ( 6:4 )
	= "H" == ? ( 7:4 )
	= "I" == ? ( 8:4 )
	= "J" == ? ( 9:4 )
	= "K" == ? ( 10:4 )
	= "L" == ? ( 11:4 )
	= "M" == ? ( 12:4 )
	= "N" == ? ( 13:4 )
	= "O" == ? ( 14:4 )
	= "P" == ? ( 15:4 )
	= "Q" == ? ( 16:4 )
	= "R" == ? ( 17:4 )
	= "S" == ? ( 18:4 )
	= "T" == ? ( 19:4 )
	= "U" == ? ( 20:4 )
	= "V" == ? ( 21:4 )
	= "W" == ? ( 22:4 )
	= "X" == ? ( 23:4 )
	= "Y" == ? ( 24:4 )
	= "Z" == ? ( 25:4 )
	= "a" == ? ( 26:4 )
	= "b" == ? ( 27:4 )
	= "c" == ? ( 28:4 )
	= "d" == ? ( 29:4 )
	= "e" == ? ( 30:4 )
	= "f" == ? ( 31:4 )
	= "g" == ? ( 32:4 )
	= "h" == ? ( 33:4 )
	= "i" == ? ( 34:4 )
	= "j" == ? ( 35:4 )
	= "k" == ? ( 36:4 )
	= "l" == ? ( 37:4 )
	= "m" == ? ( 38:4 )
	= "n" == ? ( 39:4 )
	= "o" == ? ( 40:4 )
	= "p" == ? ( 41:4 )
	= "q" == ? ( 42:4 )
	= "r" == ? ( 43:4 )
	= "s" == ? ( 44:4 )
	= "t" == ? ( 45:4 )
	= "u" == ? ( 46:4 )
	= "v" == ? ( 47:4 )
	= "w" == ? ( 48:4 )
	= "x" == ? ( 49:4 )
	= "y" == ? ( 50:4 )
	= "z" == ? ( 51:4 )
	= "0" == ? ( 52:4 )
	= "1" == ? ( 53:4 )
	= "2" == ? ( 54:4 )
	= "3" == ? ( 55:4 )
	= "4" == ? ( 56:4 )
	= "5" == ? ( 57:4 )
	= "6" == ? ( 58:4 )
	= "7" == ? ( 59:4 )
	= "8" == ? ( 60:4 )
	= "9" == ? ( 61:4 )
	= "+" == ? ( 62:4 )
	= "/" == ? ( 63:4 )
	!
} extract_number

{
	!
	[#]
	=:2 // for nbr of args
	0
	2 ^
	@ (
		%]#[( extract_number =
			= 4 % 3 == ? ( ! 4:=:0               0:=:3 3:+:3 ! )
			= 4 % 2 == ? ( ! 4:=:0   64 *        0:=:3 3:+:3 ! )
			= 4 % 1 == ? ( ! 4:=:0   4096 *      0:=:3 3:+:3 ! )
			= 4 % 0 == ? ( ! 4:=:0   262144 *    0:=:3       ! )
		)
		1 + = 2:=:0 !=
	)
	2:!
} prep_nbrs

{
	2:=:0
	= *
	#(3:=:5 3:!)
} move_nbrs

{
	= 4 %
	0 != ? ("Error: input file has wrong size\n" print -1 exit)
	= 0 == ? ("Error: input file has wrong size\n" print -1 exit)
} error_input

{
	[#]
	= 4 /
	0:=:1
	1
	%@ (
		= = *
		= 1:=:0 > ? ("Root doesnt exist\n" print -1 exit)
		= 1:=:0 == ? (
			! 0
		) : (
			! 1 +
		)
	)
	!
	0:=:2
	1:!:1
	!
	!
} square_root

{
	= 4 /
	= "Image received, nb pixels : " print print "\n" print
	"Found square : " print 2:=:0 print "\n" print
} image_size

{
	(5:=:0 "\e[48;2;" print
	= 256 / 256 /
	print ";" print
	= 256 / 256 %
	print ";" print
	= 256 % 256 %
	print "m  " print
	"\e[0m" print
	! 5:!)
} print_block

{
	2:=:0
	%@ ( 1 - print_block)
	"\n" print
	!
} print_row

{
	2:=:0
	%@ ( 1 - print_row)
} print_all

{
	9999999999
	0:=:9 !
	-1
	0:=:8 !
	256
	%@ (
		1 -
		= 6 % 51 * 0:=:7 !			// b
		= 36 % 6 / 51 * 0:=:7 !		// g
		= 36 / 51 * 0:=:7 !			// r
		5:=:0
		=

	)
	7:#:7
	7:print " " print
} calc_closest_color

!!
# 0 != ? ("Error! Usage: cat image | ./diplay_b64\n" print -1 exit)
1
@ (
	read
	65535
	%
	0
	==
	"*" print
)
square_root
prep_nbrs
move_nbrs
image_size
print_all

0 exit
error_input

calc_closest_color



0 standard input stack
2 contains square_root

7 storage rgb helper
8 closest color
9 min_distance_closest_color
